// Iremos fazer uma classe para facilitar o uso da ponte H L298N na manipulação dos motores na função Setup e Loop.
class DCMotor {  
  int spd = 255, pin1, pin2;
  
  public:  
  
    void Pinout(int in1, int in2){ // Pinout é o método para a declaração dos pinos que vão controlar o objeto motor
      pin1 = in1;
      pin2 = in2;
      pinMode(pin1, OUTPUT);
      pinMode(pin2, OUTPUT);
      }   
    void Speed(int in1){ // Speed é o método que irá ser responsável por salvar a velocidade de atuação do motor
      spd = in1;
      }     
    void Forward(){ // Forward é o método para fazer o motor girar para frente
      analogWrite(pin1, spd);
      digitalWrite(pin2, LOW);
      }   
    void Backward(){ // Backward é o método para fazer o motor girar para trás
      digitalWrite(pin1, LOW);
      analogWrite(pin2, spd);
      }
    void Stop(){ // Stop é o metodo para fazer o motor ficar parado.
      digitalWrite(pin1, LOW);
      digitalWrite(pin2, LOW);
      }
   };
   DCMotor Motor1, Motor2; // Criação de dois objetos motores, já que usaremos dois motores, e eles já estão prontos para receber os comandos já configurados acima. 
  int pwm = 255;
void setup() {
  Serial.begin(9600);
  Motor1.Pinout(1,2); // Seleção dos pinos que cada motor usará, como descrito na classe.
  Motor2.Pinout(5,6); 
}
void loop() {
  Motor2.Speed(255);// A velocidade do motor pode variar de 64 a 255, onde 255 é a velocidade máxima e 64 o mínimo.
  Motor2.Backward();
  delay(7000);

  //Motor1.Stop(); // Comando para o motor parar
  //Motor2.Stop();
  pwm = 255;
  while (pwm > 75) 
  {
   pwm-=5;
   Motor2.Speed(pwm);
   Serial.println("PWM: ");
   Serial.println(pwm);
   delay(100);
   if (pwm == 75)
   {
     Motor2.Stop();
     delay (5000);
   }
  }
  pwm = 255;
  delay(1000);
}